const player = "p";
const pipe = "x";
const emptySpace = ".";

// Define tile graphics using Sprig's basic syntax
setLegend(
  [player, bitmap`
................
................
................
.....1111.......
....144441......
...14444441.....
...14444441.....
...11444411.....
.....1111.......
.....18881......
....1888881.....
...111881111....
....1.11.1......
................
................
................`], // Cute bird sprite
  [pipe, bitmap`
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL`], // Pipe sprite
  [emptySpace, bitmap`
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................`] // Empty space sprite for background
);
// Initial map setup
const map = map`
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................
p...............
`;
setMap(map);
setBackground(emptySpace);

// Gravity and player variables
let gravity = 1;
let isFlapping = false;

// Player Flap function
onInput("w", () => {
  isFlapping = true;
  getFirst(player).y -= 1; // Move the player up by 1 tile
  setTimeout(() => (isFlapping = false), 100); // Set a short duration for flapping
});

// Gravity effect and game loop
setInterval(() => {
  if (!isFlapping) {
    getFirst(player).y += gravity; // Apply gravity if the player is not flapping
  }

  movePipes(); // Function to move pipes leftward
  checkCollision(); // Check for collisions with pipes or the ground
}, 200);

// Function to move pipes to the left
function movePipes() {
  getAll(pipe).forEach(p => {
    p.x -= 1; // Move each pipe to the left
    if (p.x < 0) p.x = width() - 1; // Loop pipe to the right side when it moves out of the screen
  });
}

// Function to check for collisions
function checkCollision() {
  const playerPos = getFirst(player);
  const collidedPipes = tilesWith(pipe, player);
  
  // Check for collision with pipes or ground
  if (collidedPipes.length > 0 || playerPos.y >= height() - 1 || playerPos.y < 0) {
    endGame();
  }
}

// Function to end the game
function endGame() {
  addText("Game Over", { y: 4, color: color`3` });
  // Stop the game loop by clearing the interval
  clearInterval(movePipes);
  clearInterval(checkCollision);
}// Function to generate a new pipe set
function generatePipes() {
  const gapSize = 4;
  const gapPosition = Math.floor(Math.random() * (height() - gapSize));

  for (let i = 0; i < height(); i++) {
    if (i < gapPosition || i > gapPosition + gapSize) {
      addSprite(width() - 1, i, pipe);
    }
  }
}

// Generate pipes at intervals
setInterval(() => {
  generatePipes();
}, 2000); // New pipes every 2 seconds